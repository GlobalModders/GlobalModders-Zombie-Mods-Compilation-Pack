/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>

#define PLUGIN "UnPrecache"
#define VERSION "1.0"
#define AUTHOR "Dias"

#define TOTALLIST 93
new UnprecacheList[TOTALLIST][48] =
{
	"weapons/boltpull1.wav",
	"weapons/boltup.wav",
	"weapons/boltdown.wav",
	"weapons/awp_deploy.wav",
	"weapons/awp_clipin.wav",
	"weapons/awp_clipout.wav",
	"weapons/g3sg1_slide.wav",
	"weapons/g3sg1_clipin.wav",
	"weapons/g3sg1_clipout.wav",
	"weapons/ak47_clipout.wav",
	"weapons/ak47_clipin.wav",
	"weapons/ak47_boltpull.wav",
	"weapons/scout_bolt.wav",
	"weapons/scout_clipin.wav",
	"weapons/scout_clipout.wav",
	"weapons/m249_boxout.wav",
	"weapons/m249_boxin.wav",
	"weapons/m249_chain.wav",
	"weapons/m249_coverup.wav",
	"weapons/m249_coverdown.wav",
	"weapons/m4a1_clipin.wav",
	"weapons/m4a1_clipout.wav",
	"weapons/m4a1_boltpull.wav",
	"weapons/m4a1_deploy.wav",
	"weapons/m4a1_silencer_on.wav",
	"weapons/m4a1_silencer_off.wav",
	"weapons/sg552_clipout.wav",
	"weapons/sg552_clipin.wav",
	"weapons/sg552_boltpull.wav",
	"weapons/aug_clipout.wav",
	"weapons/aug_clipin.wav",
	"weapons/aug_boltpull.wav",
	"weapons/aug_boltslap.wav",
	"weapons/aug_forearm.wav",
	"weapons/sg550_boltpull.wav",
	"weapons/sg550_clipin.wav",
	"weapons/sg550_clipout.wav",
	"weapons/m3_insertshell.wav",
	"weapons/m3_pump.wav",
	"weapons/mac10_clipout.wav",
	"weapons/mac10_clipin.wav",
	"weapons/mac10_boltpull.wav",
	"weapons/ump45_clipout.wav",
	"weapons/ump45_clipin.wav",
	"weapons/ump45_boltslap.wav",
	"weapons/fiveseven_clipout.wav",
	"weapons/fiveseven_clipin.wav",
	"weapons/fiveseven_sliderelease.wav",
	"weapons/fiveseven_slidepull.wav",
	"weapons/p90_clipout.wav",
	"weapons/p90_clipin.wav",
	"weapons/p90_boltpull.wav",
	"weapons/p90_cliprelease.wav",
	"weapons/de_clipout.wav",
	"weapons/de_clipin.wav",
	"weapons/de_deploy.wav",
	"weapons/p228_clipout.wav",
	"weapons/p228_clipin.wav",
	"weapons/p228_sliderelease.wav",
	"weapons/p228_slidepull.wav",
	"weapons/clipout1.wav",
	"weapons/clipin1.wav",
	"weapons/sliderelease1.wav",
	"weapons/slideback1.wav",
	"weapons/357_cock1.wav", // 65
	"weapons/mp5_clipout.wav",
	"weapons/mp5_clipin.wav",
	"weapons/mp5_slideback.wav",
	"weapons/elite_reloadstart.wav",
	"weapons/elite_leftclipin.wav",
	"weapons/elite_clipout.wav",
	"weapons/elite_sliderelease.wav",
	"weapons/elite_rightclipin.wav",
	"weapons/elite_deploy.wav",
	"weapons/galil_clipout.wav",
	"weapons/galil_clipin.wav",
	"weapons/galil_boltpull.wav",
	"weapons/famas_clipout.wav",
	"weapons/famas_clipin.wav",
	"weapons/famas_boltpull.wav",
	"weapons/famas_boltslap.wav",
	"weapons/famas_forearm.wav",
	"weapons/famas-burst.wav",
	"weapons/c4_beep1.wav",
	"weapons/c4_beep2.wav",
	"weapons/c4_beep3.wav",
	"weapons/c4_beep4.wav",
	"weapons/c4_beep5.wav",
	"weapons/c4_explode1.wav",
	"weapons/c4_plant.wav",
	"weapons/c4_disarm.wav",
	"weapons/c4_disarmed.wav",
	"hostage"
}

//new Array:PrecacheModel, Array:PrecacheSound
new /*TempPrecache[64], */Unprecache/*, Precached, Line*/

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	// Add your code here...
}

public plugin_precache()
{
	//PrecacheModel = ArrayCreate(64, 1)
	//PrecacheSound = ArrayCreate(64, 1)
	
	//register_forward(FM_PrecacheModel, "fw_PrecacheModel")
	register_forward(FM_PrecacheSound, "fw_PrecacheSound")
	
	//register_clcmd("say /check", "Check_Precache")
}

/*
public fw_PrecacheModel(const Model[])
{
	for(new i = 0; i < ArraySize(PrecacheModel); i++)
	{
		Precached = 0
		
		ArrayGetString(PrecacheModel, i, TempPrecache, sizeof(TempPrecache))
		if(equal(Model, TempPrecache)) 
		{
			Precached = 1
			break
		}
	}
	
	if(!Precached) ArrayPushString(PrecacheModel, Model)
}*/

public fw_PrecacheSound(const Sound[])
{
	Unprecache = 0
	for(new i = 0; i < TOTALLIST; i++)
	{
		if(contain(Sound, UnprecacheList[i]) != -1)
		{
			Unprecache = 1
			break
		}
	}
	
	if(Unprecache) return FMRES_SUPERCEDE
	/*
	for(new i = 0; i < ArraySize(PrecacheSound); i++)
	{
		Precached = 0
		
		ArrayGetString(PrecacheSound, i, TempPrecache, sizeof(TempPrecache))
		if(equal(Sound, TempPrecache)) 
		{
			Precached = 1
			break
		}
	}
	
	if(!Precached) 
	{
		write_file("Precache.res", Sound, Line)
		Line++
		ArrayPushString(PrecacheSound, Sound)
	}*/
	
	return FMRES_IGNORED
}
/*
public Check_Precache(id)
{
	if(!is_user_connected(id))
		return
		
	client_print(id, print_chat, "Total Precached Model: %i", ArraySize(PrecacheModel))
	client_print(id, print_chat, "Total Precached Sound: %i", ArraySize(PrecacheSound))
}*/
