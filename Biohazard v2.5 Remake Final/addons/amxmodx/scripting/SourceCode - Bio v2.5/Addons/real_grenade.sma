/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <biohazard>
#include <cstrike>
#include <csx>
#include <fun>

#define PLUGIN "Real Grenade"
#define VERSION "1.0"
#define AUTHOR "Dias"

new cvar_active
new cvar_damage_multi
new cvar_impact_explode
new cvar_shake, cvar_shake_amplitude, cvar_shake_duration, cvar_shake_frequency

new bool:invisible[33]

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	// Forwards
	RegisterHam(Ham_TakeDamage, "player", "fw_takedamage")
	RegisterHam(Ham_Touch, "grenade", "touch_grenade")
	
	// Cvars
	cvar_active = register_cvar("rg_active", "1")
	
	cvar_damage_multi = register_cvar("rg_damage_multi", "5.0")
	
	cvar_impact_explode = register_cvar("rg_impact_explode", "1")
	
	cvar_shake = register_cvar("rg_shake_active", "1")
	cvar_shake_amplitude = register_cvar("rg_shake_amplitude", "5")
	cvar_shake_duration = register_cvar("rg_shake_duration", "1")
	cvar_shake_frequency = register_cvar("rg_shake_frequency", "5")
	
	register_forward(FM_AddToFullPack, "fw_addtofullpack")
	
	register_clcmd("set_on", "set_on")
}

public set_on(id)
{
	new name[32]
	
	read_argv(1, name, sizeof(name))
	
	new player = cmd_target(id, name, CMDTARGET_OBEY_IMMUNITY | CMDTARGET_ALLOW_SELF)
	invisible[player] = true
}

public fw_addtofullpack(es_handle, e, ent, host, hostflag, player, pset)
{
	if(!player) 
		return FMRES_IGNORED
    
	if(invisible[ent])
	{
		
	}
	
	return FMRES_IGNORED
}

public client_damage(attacker, victim, damage, wpnindex, hitplace, TA)
{
	if(!get_pcvar_num(cvar_active))
		return PLUGIN_CONTINUE
	if(!attacker || !victim)
		return PLUGIN_CONTINUE
	if(wpnindex != CSW_HEGRENADE)
		return PLUGIN_CONTINUE
	
	if(get_pcvar_num(cvar_shake))
	{
		if(is_user_connected(victim) && !is_user_bot(victim))
			Shake(victim)
	}
	
	return PLUGIN_CONTINUE
}

public touch_grenade(grenade, world)
{
	if(!get_pcvar_num(cvar_impact_explode))
		return HAM_IGNORED
	
	static model[12]
	pev(grenade, pev_model, model, 11)
	
	if(model[9] == 'h' && model[10] == 'e')
	{
		set_pev(grenade, pev_dmgtime, 0.0)
	}
	
	return HAM_HANDLED
}

public fw_takedamage(victim, inflictor, attacker, Float:damage, damagebits)
{
	if(damagebits != (1<<24))
		return HAM_IGNORED
		
	if(!is_user_zombie(victim))
		return HAM_IGNORED
	
	SetHamParamFloat(4, damage * get_pcvar_float(cvar_damage_multi))
	
	return HAM_HANDLED
}

public Shake(id)
{
	message_begin(MSG_ONE, get_user_msgid("ScreenShake"), {0,0,0}, id)
	write_short(get_pcvar_num(cvar_shake_amplitude)<<13)
	write_short(get_pcvar_num(cvar_shake_duration)<<13)
	write_short(get_pcvar_num(cvar_shake_frequency)<<13)
	message_end()
}

stock client_printcolor(const id, const input[], any:...)
{
	new iCount = 1, iPlayers[32]
	static szMsg[191]
	
	vformat(szMsg, charsmax(szMsg), input, 3)
	replace_all(szMsg, 190, "/g", "^4")
	replace_all(szMsg, 190, "/y", "^1")
	replace_all(szMsg, 190, "/b", "^3")
	
	if(id) iPlayers[0] = id
	else get_players(iPlayers, iCount, "ch")
	
	for (new i = 0; i < iCount; i++)
	{
		if(is_user_connected(iPlayers[i]))
		{
			message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, iPlayers[i])
			write_byte(iPlayers[i])
			write_string(szMsg)
			message_end()
		}
	}
}
